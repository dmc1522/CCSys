//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Garibay {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsNCdatos")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsNCdatos : global::System.Data.DataSet {
        
        private dtNCdatosDataTable tabledtNCdatos;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsNCdatos() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsNCdatos(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtNCdatos"] != null)) {
                    base.Tables.Add(new dtNCdatosDataTable(ds.Tables["dtNCdatos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtNCdatosDataTable dtNCdatos {
            get {
                return this.tabledtNCdatos;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsNCdatos cln = ((dsNCdatos)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtNCdatos"] != null)) {
                    base.Tables.Add(new dtNCdatosDataTable(ds.Tables["dtNCdatos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtNCdatos = ((dtNCdatosDataTable)(base.Tables["dtNCdatos"]));
            if ((initTable == true)) {
                if ((this.tabledtNCdatos != null)) {
                    this.tabledtNCdatos.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsNCdatos";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsNCdatos.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtNCdatos = new dtNCdatosDataTable();
            base.Tables.Add(this.tabledtNCdatos);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtNCdatos() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsNCdatos ds = new dsNCdatos();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtNCdatosRowChangeEventHandler(object sender, dtNCdatosRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtNCdatosDataTable : global::System.Data.TypedTableBase<dtNCdatosRow> {
            
            private global::System.Data.DataColumn columnnotadecompraID;
            
            private global::System.Data.DataColumn columnproveedorID;
            
            private global::System.Data.DataColumn columncicloID;
            
            private global::System.Data.DataColumn columnfecha;
            
            private global::System.Data.DataColumn columnfolio;
            
            private global::System.Data.DataColumn columnsubtotal;
            
            private global::System.Data.DataColumn columntotal;
            
            private global::System.Data.DataColumn columniva;
            
            private global::System.Data.DataColumn columnobservaciones;
            
            private global::System.Data.DataColumn columnuserID;
            
            private global::System.Data.DataColumn columntipodePagoID;
            
            private global::System.Data.DataColumn columnstoreTS;
            
            private global::System.Data.DataColumn columnupdateTS;
            
            private global::System.Data.DataColumn columnfechapago;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNCdatosDataTable() {
                this.TableName = "dtNCdatos";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtNCdatosDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtNCdatosDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notadecompraIDColumn {
                get {
                    return this.columnnotadecompraID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn proveedorIDColumn {
                get {
                    return this.columnproveedorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cicloIDColumn {
                get {
                    return this.columncicloID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fechaColumn {
                get {
                    return this.columnfecha;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn folioColumn {
                get {
                    return this.columnfolio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subtotalColumn {
                get {
                    return this.columnsubtotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ivaColumn {
                get {
                    return this.columniva;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn observacionesColumn {
                get {
                    return this.columnobservaciones;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tipodePagoIDColumn {
                get {
                    return this.columntipodePagoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn storeTSColumn {
                get {
                    return this.columnstoreTS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updateTSColumn {
                get {
                    return this.columnupdateTS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fechapagoColumn {
                get {
                    return this.columnfechapago;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNCdatosRow this[int index] {
                get {
                    return ((dtNCdatosRow)(this.Rows[index]));
                }
            }
            
            public event dtNCdatosRowChangeEventHandler dtNCdatosRowChanging;
            
            public event dtNCdatosRowChangeEventHandler dtNCdatosRowChanged;
            
            public event dtNCdatosRowChangeEventHandler dtNCdatosRowDeleting;
            
            public event dtNCdatosRowChangeEventHandler dtNCdatosRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtNCdatosRow(dtNCdatosRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNCdatosRow AdddtNCdatosRow(int notadecompraID, int proveedorID, int cicloID, System.DateTime fecha, string folio, decimal subtotal, decimal total, decimal iva, string observaciones, int userID, int tipodePagoID, System.DateTime storeTS, System.DateTime updateTS, System.DateTime fechapago) {
                dtNCdatosRow rowdtNCdatosRow = ((dtNCdatosRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        notadecompraID,
                        proveedorID,
                        cicloID,
                        fecha,
                        folio,
                        subtotal,
                        total,
                        iva,
                        observaciones,
                        userID,
                        tipodePagoID,
                        storeTS,
                        updateTS,
                        fechapago};
                rowdtNCdatosRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtNCdatosRow);
                return rowdtNCdatosRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtNCdatosDataTable cln = ((dtNCdatosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtNCdatosDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnotadecompraID = base.Columns["notadecompraID"];
                this.columnproveedorID = base.Columns["proveedorID"];
                this.columncicloID = base.Columns["cicloID"];
                this.columnfecha = base.Columns["fecha"];
                this.columnfolio = base.Columns["folio"];
                this.columnsubtotal = base.Columns["subtotal"];
                this.columntotal = base.Columns["total"];
                this.columniva = base.Columns["iva"];
                this.columnobservaciones = base.Columns["observaciones"];
                this.columnuserID = base.Columns["userID"];
                this.columntipodePagoID = base.Columns["tipodePagoID"];
                this.columnstoreTS = base.Columns["storeTS"];
                this.columnupdateTS = base.Columns["updateTS"];
                this.columnfechapago = base.Columns["fechapago"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnotadecompraID = new global::System.Data.DataColumn("notadecompraID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotadecompraID);
                this.columnproveedorID = new global::System.Data.DataColumn("proveedorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproveedorID);
                this.columncicloID = new global::System.Data.DataColumn("cicloID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncicloID);
                this.columnfecha = new global::System.Data.DataColumn("fecha", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfecha);
                this.columnfolio = new global::System.Data.DataColumn("folio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfolio);
                this.columnsubtotal = new global::System.Data.DataColumn("subtotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubtotal);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columniva = new global::System.Data.DataColumn("iva", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniva);
                this.columnobservaciones = new global::System.Data.DataColumn("observaciones", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobservaciones);
                this.columnuserID = new global::System.Data.DataColumn("userID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columntipodePagoID = new global::System.Data.DataColumn("tipodePagoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntipodePagoID);
                this.columnstoreTS = new global::System.Data.DataColumn("storeTS", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstoreTS);
                this.columnupdateTS = new global::System.Data.DataColumn("updateTS", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdateTS);
                this.columnfechapago = new global::System.Data.DataColumn("fechapago", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfechapago);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNCdatosRow NewdtNCdatosRow() {
                return ((dtNCdatosRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtNCdatosRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtNCdatosRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtNCdatosRowChanged != null)) {
                    this.dtNCdatosRowChanged(this, new dtNCdatosRowChangeEvent(((dtNCdatosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtNCdatosRowChanging != null)) {
                    this.dtNCdatosRowChanging(this, new dtNCdatosRowChangeEvent(((dtNCdatosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtNCdatosRowDeleted != null)) {
                    this.dtNCdatosRowDeleted(this, new dtNCdatosRowChangeEvent(((dtNCdatosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtNCdatosRowDeleting != null)) {
                    this.dtNCdatosRowDeleting(this, new dtNCdatosRowChangeEvent(((dtNCdatosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtNCdatosRow(dtNCdatosRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsNCdatos ds = new dsNCdatos();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtNCdatosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtNCdatosRow : global::System.Data.DataRow {
            
            private dtNCdatosDataTable tabledtNCdatos;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtNCdatosRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtNCdatos = ((dtNCdatosDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int notadecompraID {
                get {
                    try {
                        return ((int)(this[this.tabledtNCdatos.notadecompraIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notadecompraID\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.notadecompraIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int proveedorID {
                get {
                    try {
                        return ((int)(this[this.tabledtNCdatos.proveedorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'proveedorID\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.proveedorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cicloID {
                get {
                    try {
                        return ((int)(this[this.tabledtNCdatos.cicloIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cicloID\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.cicloIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime fecha {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtNCdatos.fechaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fecha\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.fechaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string folio {
                get {
                    try {
                        return ((string)(this[this.tabledtNCdatos.folioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'folio\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.folioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal subtotal {
                get {
                    try {
                        return ((decimal)(this[this.tabledtNCdatos.subtotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'subtotal\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.subtotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal total {
                get {
                    try {
                        return ((decimal)(this[this.tabledtNCdatos.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iva {
                get {
                    try {
                        return ((decimal)(this[this.tabledtNCdatos.ivaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'iva\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.ivaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string observaciones {
                get {
                    try {
                        return ((string)(this[this.tabledtNCdatos.observacionesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'observaciones\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.observacionesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userID {
                get {
                    try {
                        return ((int)(this[this.tabledtNCdatos.userIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'userID\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.userIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tipodePagoID {
                get {
                    try {
                        return ((int)(this[this.tabledtNCdatos.tipodePagoIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tipodePagoID\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.tipodePagoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime storeTS {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtNCdatos.storeTSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'storeTS\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.storeTSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime updateTS {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtNCdatos.updateTSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'updateTS\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.updateTSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime fechapago {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtNCdatos.fechapagoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fechapago\' in table \'dtNCdatos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtNCdatos.fechapagoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotadecompraIDNull() {
                return this.IsNull(this.tabledtNCdatos.notadecompraIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotadecompraIDNull() {
                this[this.tabledtNCdatos.notadecompraIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsproveedorIDNull() {
                return this.IsNull(this.tabledtNCdatos.proveedorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetproveedorIDNull() {
                this[this.tabledtNCdatos.proveedorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscicloIDNull() {
                return this.IsNull(this.tabledtNCdatos.cicloIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcicloIDNull() {
                this[this.tabledtNCdatos.cicloIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfechaNull() {
                return this.IsNull(this.tabledtNCdatos.fechaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfechaNull() {
                this[this.tabledtNCdatos.fechaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfolioNull() {
                return this.IsNull(this.tabledtNCdatos.folioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfolioNull() {
                this[this.tabledtNCdatos.folioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssubtotalNull() {
                return this.IsNull(this.tabledtNCdatos.subtotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsubtotalNull() {
                this[this.tabledtNCdatos.subtotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tabledtNCdatos.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tabledtNCdatos.totalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsivaNull() {
                return this.IsNull(this.tabledtNCdatos.ivaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetivaNull() {
                this[this.tabledtNCdatos.ivaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsobservacionesNull() {
                return this.IsNull(this.tabledtNCdatos.observacionesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetobservacionesNull() {
                this[this.tabledtNCdatos.observacionesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserIDNull() {
                return this.IsNull(this.tabledtNCdatos.userIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserIDNull() {
                this[this.tabledtNCdatos.userIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstipodePagoIDNull() {
                return this.IsNull(this.tabledtNCdatos.tipodePagoIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettipodePagoIDNull() {
                this[this.tabledtNCdatos.tipodePagoIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstoreTSNull() {
                return this.IsNull(this.tabledtNCdatos.storeTSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstoreTSNull() {
                this[this.tabledtNCdatos.storeTSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupdateTSNull() {
                return this.IsNull(this.tabledtNCdatos.updateTSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupdateTSNull() {
                this[this.tabledtNCdatos.updateTSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfechapagoNull() {
                return this.IsNull(this.tabledtNCdatos.fechapagoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfechapagoNull() {
                this[this.tabledtNCdatos.fechapagoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtNCdatosRowChangeEvent : global::System.EventArgs {
            
            private dtNCdatosRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNCdatosRowChangeEvent(dtNCdatosRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtNCdatosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591